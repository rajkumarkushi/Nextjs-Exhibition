generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addexhi {
  id                    String   @id
  title                 String
  contactPhone          String?
  venueAddress          String?
  eventImages           String?
  registrationDocuments String?
  eventType             String?
  startingTicketPrice   Float?
  description           String?
  totalStalls           Int?
  amenities             String?
  location              String?
  termsAccepted         Boolean  @default(false)
  status                String   @default("DRAFT")
  organizerId           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  user                  user?    @relation(fields: [organizerId], references: [id], map: "AddExhi_organizerId_fkey")

  @@index([organizerId], map: "AddExhi_organizerId_fkey")
}

model event {
  id           String   @id
  title        String
  description  String?
  date         DateTime
  price        Float
  totalTickets Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  ticket       ticket[]
}

model Location {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String?  @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventType {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String?  @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model organizerprofile {
  id                String   @id
  userId            String   @unique(map: "OrganizerProfile_userId_key")
  panNumber         String?
  panFileName       String?
  bankName          String?
  accountNumber     String?
  ifsc              String?
  accountHolderName String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  user              user     @relation(fields: [userId], references: [id], map: "OrganizerProfile_userId_fkey")
}

model ticket {
  id          String   @id
  buyerName   String
  phone       String
  email       String?
  ticketsQty  Int
  amount      Float
  qrCodeUrl   String?
  qrPayload   String?  @db.Text
  status      String   @default("PENDING")
  uploadImage String?
  youtubeUrl  String?
  eventId     String
  createdAt   DateTime @default(now())
  event       event    @relation(fields: [eventId], references: [id], map: "Ticket_eventId_fkey")

  @@index([eventId], map: "Ticket_eventId_fkey")
}

model user {
  id               String            @id
  name             String
  email            String            @unique(map: "User_email_key")
  phone            String?           @unique(map: "User_phone_key")
  passwordHash     String
  role             String            @default("organizer")
  isVerified       Boolean           @default(false)
  refreshToken     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  addexhi          addexhi[]
  organizerprofile organizerprofile?
}
