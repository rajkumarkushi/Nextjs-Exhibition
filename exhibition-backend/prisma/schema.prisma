generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           String   @id @default(uuid())
  name         String?
  email        String?  @unique
  phone        String?  @unique
  passwordHash String?
  role         String   @default("organizer")
  isVerified   Boolean  @default(false)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  addexhi          addexhi[]
  organizerprofile organizerprofile? @relation("OrganizerProfileToUser")
}

model Location {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String?   @unique
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addexhi   addexhi[]
}

model EventType {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String?   @unique
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addexhi   addexhi[]
}

model organizerprofile {
  id                String   @id @default(uuid())
  userId            String   @unique(map: "OrganizerProfile_userId_key")
  panNumber         String?
  panFileName       String?
  bankName          String?
  accountNumber     String?
  ifsc              String?
  accountHolderName String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // relation to user (explicit name must match the other side)
  user user @relation("OrganizerProfileToUser", fields: [userId], references: [id], map: "OrganizerProfile_userId_fkey")
}

model addexhi {
  id                    String   @id @default(uuid())
  title                 String
  contactPhone          String?
  venueAddress          String?
  eventImages           String?
  registrationDocuments String?
  eventType             String?
  eventTypeId           String? // FK to EventType
  startingTicketPrice   Float?
  description           String?
  totalStalls           Int?
  amenities             String?
  location              String?
  locationId            String? // FK to Location
  termsAccepted         Boolean  @default(false)
  status                String   @default("DRAFT")
  organizerId           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user         user?      @relation(fields: [organizerId], references: [id])
  locationRel  Location?  @relation(fields: [locationId], references: [id])
  eventTypeRel EventType? @relation(fields: [eventTypeId], references: [id])
  ticket       ticket[]

  @@index([organizerId])
  @@index([locationId])
  @@index([eventTypeId])
}

model ticket {
  id          String   @id @default(uuid())
  buyerName   String
  phone       String
  email       String?
  ticketsQty  Int
  amount      Float
  qrCodeUrl   String?
  qrPayload   String?  @db.Text
  status      String   @default("CONFIRMED")
  uploadImage String?
  youtubeUrl  String?
  eventId     String
  createdAt   DateTime @default(now())

  updatedAt DateTime @default(now()) @updatedAt

  event addexhi @relation(fields: [eventId], references: [id])

  @@index([eventId], map: "Ticket_eventId_fkey")
}
